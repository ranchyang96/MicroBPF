4a5
> import argparse
6c7
< from socket import inet_ntop, AF_INET, AF_INET6, gethostname, gethostbyname
---
> from socket import inet_ntop, AF_INET, AF_INET6
8a10
> from time import sleep
10c12
< from os import kill, getpid, path
---
> import argparse
11a14
> from os import kill, getpid, path
13d15
< import argparse
16d17
< from clock import Time
20,23c21,26
<     ./tcp             # trace all TCP packets
<     ./tcp -p  5205    # only trace port 5205
<     ./in_porbe -s  5       # only trace one packet in every 2^5 packets
<     ./in_porbe -o  [fname] # print the information into /usr/local/bcc/fname
---
>     ./tcpack             # trace all ACKs
>     ./tcpack -p  5205    # only trace port 5205
>     ./tcpack -dp 5205    # only trace remote port 5205
>     ./tcpack -sp 5205    # only trace local port 5205
>     ./tcpack -s 5        # only trace one ACK in every 2^5 ACKs
>     ./tcpack -o  [fname] # print the information into /usr/local/bcc/fname
27c30
<     description="Trace the duration in TCP, IP and MAC layers",
---
>     description="Trace the TCP metrics with ACKs",
31a35,38
> parser.add_argument("-sp", "--sport", 
>     help="TCP source port")
> parser.add_argument("-dp", "--dport",
>     help="TCP destination port")
34c41
< parser.add_argument("-o", "--output", nargs='?', const="tcp",
---
> parser.add_argument("-o", "--output", nargs='?', const="tcpack",
44d50
< #include <linux/ip.h>
47d52
< #include <uapi/linux/if_ether.h>
48a54
> #include <net/inet_connection_sock.h>
50,63d55
< #include <linux/skbuff.h>
< #include <linux/netdevice.h>
< #include <net/tcp.h>
< #include <net/ip.h>
< 
< 
< struct packet_tuple {
<     u32 saddr;
<     u32 daddr;
<     u16 sport;
<     u16 dport;
<     u32 seq;
<     u32 ack;
< };
66,74c58,64
< struct ktime_info {
<     u64 mac_in;
<     u64 ip_in;
<     u64 tcp_in;
<     u64 app_in;
<     u64 app_out;
<     u64 tcp_out;
<     u64 ip_out;
<     u64 mac_out; 
---
> struct ipv4_flow_info {
>     u64 init_time;
>     u16 mss;
>     u32 fastRe;
>     u32 timeout;
>     u32 last_cwnd;
>     u32 max_bytes_inflight;
75a66
> BPF_HASH(flows_info, struct sock *, struct ipv4_flow_info);
78,92c69,71
< struct data_ktime {
<     u64 total;
<     u64 mac_in;
<     u64 mac_in_timestamp;
<     u64 ip_in;
<     u64 tcp_in;
<     u64 app;
<     u64 tcp_out;
<     u64 ip_out;
<     u64 mac_out;
<     u64 mac_out_timestamp;
< };
< 
< 
< struct data_t {
---
> // only consider data structs for ipv4
> struct ipv4_data_t {
>     u32 pid;
99c78,93
<     struct data_ktime latencies;
---
>     u8 state;
>     u8 tcpflags;
>     u32 snd_cwnd;
>     u32 rcv_wnd;
>     u32	total_retrans;
>     u32 fastRe;
>     u32 timeout;
>     u64 bytes_acked;
>     u64 bytes_received;
>     u32 srtt;
>     u64 srtt_sum;
>     u32 srtt_counter;
>     // flight size
>     u32 packets_out;
>     u64 duration;
>     u32 bytes_inflight;
101,103c95
< 
< BPF_HASH(timestamps, struct packet_tuple, struct ktime_info);
< BPF_PERF_OUTPUT(timestamp_events);
---
> BPF_PERF_OUTPUT(ipv4_events);
117,135d108
< static inline int machdr_len(struct sk_buff *skb)
< {
<     return skb->mac_len;
< }
< 
< 
< static inline int iphdr_len(struct iphdr *ip)
< {
<     // BCC does not support bitfield
<     // get iphdr->ihl if __BIG_ENDIAN_BITFIELD
<     return ((*(u8 *)ip) & 0x0F) << 2;
< }
< 
< static inline int tcphdr_len(struct tcphdr *tcp)
< {
<     // BCC does not support bitfield
<     // get tcphdr->doff if __BIG_ENDIAN_BITFIELD
<     return (*((u8 *)tcp + 12)) >> 4 << 2;
< }
137,138c110
< 
< static void get_pkt_in_tuple(struct packet_tuple *pkt_tuple, struct iphdr *ip, struct tcphdr *tcp)
---
> int trace_tcp_ack(struct pt_regs *ctx, struct sock *sk, struct sk_buff *skb)
140,153c112,113
<     u16 sport = 0, dport = 0;
<     u32 seq = 0, ack = 0; 
< 
<     //pkt_tuple->saddr = ip->daddr;
<     pkt_tuple->daddr = ip->saddr;
<     sport = tcp->source;
<     dport = tcp->dest;
<     pkt_tuple->sport = ntohs(dport);
<     pkt_tuple->dport = ntohs(sport);
<     seq = tcp->seq;
<     ack = tcp->ack_seq;
<     pkt_tuple->ack = ntohl(seq);
<     pkt_tuple->seq = ntohl(ack);
< } 
---
>     if (sk == NULL)
>         return 0;
154a115,118
>     // pull in details from the packet headers and the sock struct
>     u16 family = sk->__sk_common.skc_family;
>     if (family != AF_INET)
>         return 0;
156,157c120,122
< static void get_pkt_out_tuple(struct packet_tuple *pkt_tuple, struct iphdr *ip, struct tcphdr *tcp)
< {
---
>     u32 pid = bpf_get_current_pid_tgid();
>     char state = sk->__sk_common.skc_state;
>     u32 ack = 0, seq = 0, snd_cwnd = 0;
159,161c124,127
<     u32 seq = 0, ack = 0; 
< 
<     pkt_tuple->daddr = ip->daddr;
---
>     struct tcphdr *tcp = skb_to_tcphdr(skb);
>     struct iphdr *ip = skb_to_iphdr(skb);
>     struct tcp_sock *tp = (struct tcp_sock *)sk;
>     u8 tcpflags = ((u_int8_t *)tcp)[13];
164,165c130,131
<     pkt_tuple->sport = ntohs(sport);
<     pkt_tuple->dport = ntohs(dport);
---
>     sport = ntohs(sport);
>     dport = ntohs(dport);
166a133
>     seq = ntohl(seq);
168,239c135
<     pkt_tuple->seq = ntohl(seq);
<     pkt_tuple->ack = ntohl(ack);
< } 
< 
< // request tuples: (SIP, SPORT, DIP, DPORT, SEQ A, ACK B)
< // response tuples: (DIP, DPORT, SIP, SPORT, SEQ B, ACK A+len)
< 
< int trace_eth_type_trans(struct pt_regs *ctx, struct sk_buff *skb)
< {
<     const struct ethhdr* eth = (struct ethhdr*) skb->data;
<     u16 protocol = eth->h_proto;
<     // Protocol is IP
<     if (protocol == 8) 
<     {
<         struct iphdr *ip = (struct iphdr *)(skb->data + 14);
<         struct tcphdr *tcp = (struct tcphdr *)(skb->data + 34);
<         struct packet_tuple pkt_tuple = {};
<         get_pkt_in_tuple(&pkt_tuple, ip, tcp);
< 
<         u32 len = skb->len - machdr_len(skb) - iphdr_len(ip) - tcphdr_len(tcp);
<         pkt_tuple.ack += len;
<         
<         SAMPLING
<         FILTER_PORT
< 
<         struct ktime_info *tinfo, zero={}; 
<         if ((tinfo = timestamps.lookup_or_init(&pkt_tuple, &zero)) == NULL)
<             return 0;
< 
<         tinfo->mac_in = bpf_ktime_get_ns();
<     }
< 
<     return 0;
< }
< 
< 
< int trace_ip_rcv(struct pt_regs *ctx, struct sk_buff *skb)
< {
<     if (skb == NULL)
<         return 0;
< 
<     struct iphdr *ip = skb_to_iphdr(skb);
<     struct tcphdr *tcp = skb_to_tcphdr(skb);
<     struct packet_tuple pkt_tuple = {};
<     get_pkt_in_tuple(&pkt_tuple, ip, tcp);
< 
<     u32 len = skb->len - iphdr_len(ip) - tcphdr_len(tcp);
<     pkt_tuple.ack += len;
< 
<     SAMPLING
<     FILTER_PORT
< 
<     struct ktime_info *tinfo;
<     if ((tinfo = timestamps.lookup(&pkt_tuple)) == NULL)
<         return 0;
<     tinfo->ip_in = bpf_ktime_get_ns();
<     
<     return 0;
< }
< 
< int trace_tcp_v4_rcv(struct pt_regs *ctx, struct sk_buff *skb)
< {
<     if (skb == NULL)
<         return 0;
< 
<     struct iphdr *ip = skb_to_iphdr(skb);
<     struct tcphdr *tcp = skb_to_tcphdr(skb);
<     struct packet_tuple pkt_tuple = {};
<     get_pkt_in_tuple(&pkt_tuple, ip, tcp);
< 
<     u32 len = skb->len - tcphdr_len(tcp);
<     pkt_tuple.ack += len;
---
>     ack = ntohl(ack);
242a139,140
>     FILTER_DPORT
>     FILTER_SPORT
244,262c142,167
<     struct ktime_info *tinfo;
<     if ((tinfo = timestamps.lookup(&pkt_tuple)) == NULL)
<         return 0;
<     tinfo->tcp_in = bpf_ktime_get_ns();
< 
<     return 0;
< }
< 
< 
< 
< int trace_skb_copy_datagram_iter(struct pt_regs *ctx, struct sk_buff *skb)
< {
<     if (skb == NULL)
<         return 0;
< 
<     struct iphdr *ip = skb_to_iphdr(skb);
<     struct tcphdr *tcp = skb_to_tcphdr(skb);
<     struct packet_tuple pkt_tuple = {};
<     get_pkt_in_tuple(&pkt_tuple, ip, tcp);
---
>     struct ipv4_flow_info *finfo, zero = {};
>     finfo = flows_info.lookup_or_init(&sk, &zero);
>     struct ipv4_data_t data4 = {};
>     u32 srtt = 0;
>     data4.pid = pid;
>     data4.saddr = ip->saddr;
>     data4.daddr = ip->daddr;
>     data4.dport = dport;
>     data4.sport = sport;
>     data4.seq = seq;
>     data4.ack = ack;
>     data4.state = state;
>     data4.tcpflags = tcpflags;
>     data4.snd_cwnd = tp->snd_cwnd;
>     data4.rcv_wnd = tp->rcv_wnd;
>     data4.bytes_acked = tp->bytes_acked;
>     data4.bytes_received = tp->bytes_received;
>     data4.total_retrans = tp->total_retrans;
>     data4.fastRe = finfo->fastRe;
>     data4.timeout = finfo->timeout;
>     data4.srtt = tp->srtt_us;
>     data4.srtt_counter += 1;
>     data4.srtt_sum += tp->srtt_us;
>     data4.packets_out = tp->packets_out;
>     data4.duration = bpf_ktime_get_ns() - finfo->init_time;
>     data4.bytes_inflight = tp->snd_nxt - tp->snd_una; 
264,272c169
<     pkt_tuple.ack += skb->len;
< 
<     SAMPLING
<     FILTER_PORT
<     
<     struct ktime_info *tinfo;
<     if ((tinfo = timestamps.lookup(&pkt_tuple)) == NULL)
<         return 0;
<     tinfo->app_in = bpf_ktime_get_ns();
---
>     ipv4_events.perf_submit(ctx, &data4, sizeof(data4));
278c175
< int trace_tcp_transmit_skb(struct pt_regs *ctx, struct sock *sk, struct sk_buff *skb, int clone_it, gfp_t gfp_mask, u32 rcv_nxt)
---
> int trace_tcp_set_state(struct pt_regs *ctx, struct sock *sk, int state)
280,303c177,185
<     if (skb == NULL)
<         return 0;
< 
<     u16 family = sk->__sk_common.skc_family;
<     if (family == AF_INET) {
<         struct packet_tuple pkt_tuple = {};
<         struct tcp_skb_cb *tcb;
<         u16 dport = 0;
<         pkt_tuple.daddr = sk->__sk_common.skc_daddr;
<         dport = sk->__sk_common.skc_dport;
<         pkt_tuple.sport = sk->__sk_common.skc_num;
<         pkt_tuple.dport = ntohs(dport);
<         tcb = TCP_SKB_CB(skb);
<         pkt_tuple.seq = tcb->seq; 
<         pkt_tuple.ack = rcv_nxt;
< 
<         SAMPLING
<         FILTER_PORT
< 
<         struct ktime_info *tinfo, zero = {};
<         if ((tinfo = timestamps.lookup(&pkt_tuple)) == NULL)
<             return 0;
< 
<         tinfo->app_out = bpf_ktime_get_ns();
---
>     if (state == TCP_ESTABLISHED) {
>         u64 ts = bpf_ktime_get_ns();
>         struct tcp_sock *tp = (struct tcp_sock *)sk;
>         struct ipv4_flow_info *finfo, zero = {};
>         finfo = flows_info.lookup_or_init(&sk, &zero);
>         finfo->init_time = ts;
>         finfo->mss == tp->advmss;
>     } else if (state == TCP_CLOSE) {
>         flows_info.delete(&sk);
305,308d186
<     
<     return 0;
< }
< 
310,338d187
< int trace_ip_queue_xmit(struct pt_regs *ctx, struct sock *sk, struct sk_buff *skb)
< {
<     if (skb == NULL)
<         return 0;
< 
<     u16 family = sk->__sk_common.skc_family;
<     if (family == AF_INET) {
<         struct packet_tuple pkt_tuple = {};
<         u16 dport = 0;
<         u32 seq = 0, ack = 0;
<         pkt_tuple.daddr = sk->__sk_common.skc_daddr;
<         dport = sk->__sk_common.skc_dport;
<         pkt_tuple.sport = sk->__sk_common.skc_num;
<         pkt_tuple.dport = ntohs(dport);
<         struct tcphdr *tcp = skb_to_tcphdr(skb);
<         seq = tcp->seq;
<         ack = tcp->ack_seq;
<         pkt_tuple.seq = ntohl(seq);
<         pkt_tuple.ack = ntohl(ack);
< 
<         SAMPLING
<         FILTER_PORT
< 
<         struct ktime_info *tinfo;
<         if ((tinfo = timestamps.lookup(&pkt_tuple)) == NULL)
<             return 0;
<         tinfo->tcp_out = bpf_ktime_get_ns();
<     }
<     
340c189
< }
---
> } 
343c192
< int trace_dev_queue_xmit(struct pt_regs *ctx, struct sk_buff *skb)
---
> int trace_tcp_enter_recovery(struct pt_regs *ctx, struct sock *sk)
345,359c194,196
<     if (skb == NULL)
<         return 0;
< 
<     struct iphdr *ip = skb_to_iphdr(skb);
<     struct tcphdr *tcp = skb_to_tcphdr(skb);
<     struct packet_tuple pkt_tuple = {};
<     get_pkt_out_tuple(&pkt_tuple, ip, tcp);
< 
<     SAMPLING
<     FILTER_PORT
< 
<     struct ktime_info *tinfo;
<     if ((tinfo = timestamps.lookup(&pkt_tuple)) == NULL)
<         return 0;
<     tinfo->ip_out = bpf_ktime_get_ns();
---
>     struct ipv4_flow_info *finfo, zero = {};
>     finfo = flows_info.lookup_or_init(&sk, &zero);
>     finfo->fastRe += 1;
365c202
< int trace_dev_hard_start_xmit(struct pt_regs *ctx, struct sk_buff *skb)
---
> int trace_tcp_enter_loss(struct pt_regs *ctx, struct sock *sk)
367,411c204,206
<     if (skb == NULL)
<         return 0;
< 
<     struct iphdr *ip = skb_to_iphdr(skb);
<     struct tcphdr *tcp = skb_to_tcphdr(skb);
<     struct packet_tuple pkt_tuple = {};
<     get_pkt_out_tuple(&pkt_tuple, ip, tcp);
< 
<     SAMPLING
<     FILTER_PORT
< 
<     struct ktime_info *tinfo;
<     if ((tinfo = timestamps.lookup(&pkt_tuple)) == NULL)
<         return 0;
< 
<     tinfo->mac_out = bpf_ktime_get_ns();
< 
<     struct data_t data = {};
<     if (tinfo->app_in) {
<         data.latencies.total  = tinfo->mac_out - tinfo->mac_in;
<         data.latencies.mac_in = tinfo->ip_in - tinfo->mac_in;
<         data.latencies.mac_in_timestamp = tinfo->mac_in;
<         data.latencies.ip_in  = tinfo->tcp_in - tinfo->ip_in;
<         data.latencies.tcp_in = tinfo->app_in - tinfo->tcp_in;
<         data.latencies.app    = tinfo->app_out - tinfo->app_in;
<     } else {
<         timestamps.delete(&pkt_tuple);
<         return 0;
<     }
< 
<     data.latencies.tcp_out = tinfo->tcp_out - tinfo->app_out;
<     data.latencies.ip_out  = tinfo->ip_out - tinfo->tcp_out;
<     data.latencies.mac_out = tinfo->mac_out - tinfo->ip_out;
<     data.latencies.mac_in_timestamp = tinfo->mac_out;
< 
<     data.sport = pkt_tuple.sport;
<     data.daddr = pkt_tuple.daddr;
<     //data.nat_saddr = ip->saddr;
<     //data.nat_sport = ntohs(sport);
<     data.dport = pkt_tuple.dport;
<     data.seq = pkt_tuple.seq;
<     data.ack = pkt_tuple.ack;
<     
<     timestamp_events.perf_submit(ctx, &data, sizeof(data));
<     timestamps.delete(&pkt_tuple);
---
>     struct ipv4_flow_info *finfo, zero = {};
>     finfo = flows_info.lookup_or_init(&sk, &zero);
>     finfo->timeout += 1;
415d209
< 
421c215
<         'if (pkt_tuple.sport != %s && pkt_tuple.dport != %s) { return 0; }' % (args.port, args.port))
---
>         'if (sport != %s && dport != %s) { return 0; }' % (args.port, args.port))
423a218,222
> if args.sport:
>     bpf_text = bpf_text.replace('FILTER_SPORT',
>         'if (sport != %s) { return 0; }' % args.sport)
> else:
>     bpf_text = bpf_text.replace('FILTER_SPORT', '')
424a224,228
> if args.dport:
>     bpf_text = bpf_text.replace('FILTER_DPORT',
>         'if (dport != %s) { return 0; }' % args.dport)
> else:
>     bpf_text = bpf_text.replace('FILTER_DPORT', '')
427c231
<         'if (((pkt_tuple.seq + pkt_tuple.ack) << (32-%s) >> (32-%s)) != ((0x01 << %s) - 1)) { return 0;}' % (args.sample, args.sample, args.sample))
---
>         'if (((seq+ack) << (32-%s) >> (32-%s)) != ((0x01 << %s) - 1)) { return 0;}' % (args.sample, args.sample, args.sample))
430,431d233
< 
< 
442,457d243
<  
< 
< class ktime_t(ct.Structure):
<     _fields_ = [
<         ("total", ct.c_ulonglong),
<         ("mac_in", ct.c_ulonglong),
<         ("mac_in_timestamp", ct.c_ulonglong),
<         ("ip_in", ct.c_ulonglong),
<         ("tcp_in", ct.c_ulonglong),
<         ("app", ct.c_ulonglong),
<         ("tcp_out", ct.c_ulonglong),
<         ("ip_out", ct.c_ulonglong),
<         ("mac_out", ct.c_ulonglong),
<         ("mac_out_timestamp", ct.c_ulonglong),
<     ]
< 
459c245,246
< class Data_t(ct.Structure):
---
> # event data
> class Data_ipv4(ct.Structure):
460a248
>         ("pid", ct.c_uint),
467c255,269
<         ("latencies", ktime_t),
---
>         ("state", ct.c_ubyte),
>         ("tcpflags", ct.c_ubyte),
>         ("snd_cwnd", ct.c_uint),
>         ("rcv_wnd", ct.c_uint),
>         ("total_retrans", ct.c_uint),
>         ("fastRe", ct.c_uint),
>         ("timeout", ct.c_uint),
>         ("bytes_acked", ct.c_ulonglong),
>         ("bytes_received", ct.c_ulonglong),
>         ("srtt", ct.c_uint),
>         ("srtt_sum", ct.c_ulonglong),
>         ("srtt_counter", ct.c_uint),
>         ("packets_out", ct.c_uint),
>         ("duration", ct.c_ulonglong),
>         ("bytes_inflight", ct.c_uint),
470,473d271
< 
< tm = Time()
< ip = gethostbyname(gethostname())
< 
475,478c273,276
< def print_event(cpu, data, size):
<     event = ct.cast(data, ct.POINTER(Data_t)).contents
<     print("5 %-20s -> %-20s %-12s %-12s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s" % (
<         "%s:%d" % (ip, event.sport),
---
> def print_ipv4_event(cpu, data, size):
>     event = ct.cast(data, ct.POINTER(Data_ipv4)).contents
>     print("3 %-20s -> %-20s %-10s %-10s %-12s (%s) %-8s %-8s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-20s %-10s" % (
>         "%s:%d" % (inet_ntop(AF_INET, pack('I', event.saddr)), event.sport),
482,492c280,293
<         #"%f" % (tm.get_abs_time(event.latencies.mac_in_timestamp*1e-9)),
<         #"%f" % (tm.get_abs_time(event.latencies.mac_out_timestamp*1e-9)),
<         "%d" % (event.latencies.total/1000),
<         "%d" % (event.latencies.mac_in/1000),
<         "%d" % (event.latencies.ip_in/1000),
<         "%d" % (event.latencies.tcp_in/1000),
<         "%d" % (event.latencies.app/1000),
<         "%d" % (event.latencies.tcp_out/1000),
<         "%d" % (event.latencies.ip_out/1000),
<         "%d" % (event.latencies.mac_out/1000)))
< 
---
>         tcp.tcpstate[event.state], tcp.flags2str(event.tcpflags),
>         "%d" % (event.srtt >> 3),
>         "%d" % (event.snd_cwnd),
>         "%d" % (event.rcv_wnd),
>         "%d" % (event.total_retrans),
>         "%d" % (event.fastRe),
>         "%d" % (event.timeout),
>         "%d" % (event.bytes_acked),
>         "%d" % (event.bytes_received),
>         "%d" % (event.srtt_sum),
>         "%d" % (event.srtt_counter),
>         "%d" % (event.packets_out),
>         "%d" % (event.duration),
>         "%d" % (event.bytes_inflight)))
497,500c298,300
< kprobe_functions_list = ["eth_type_trans", "ip_rcv", "tcp_v4_rcv", "skb_copy_datagram_iter", "tcp_transmit_skb", "ip_queue_xmit", "dev_queue_xmit", "dev_hard_start_xmit"]
< 
< for i in range(len(kprobe_functions_list)):
<     function = kprobe_functions_list[i]
---
> functions_list = ["tcp_ack", "tcp_set_state", "tcp_enter_recovery", "tcp_enter_loss"]
> for i in range(len(functions_list)):
>     function = functions_list[i]
513c313
<     print("5 %-20s -> %-20s %-12s %-12s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s" % ("SADDR:SPORT", "DADDR:DPORT", "SEQ", "ACK", "TOTAL", "MAC_IN", "IP_IN", "TCP_IN", "APP", "TCP_OUT", "IP_OUT", "MAC_OUT"))
---
>     print("%-20s -> %-20s %-10s %-10s %-8s %-8s %-12s (%s)" % ("SADDR:SPORT", "DADDR:DPORT", "SEQ", "ACK", "RTT(us)", "CWnd", "STATE", "FLAGS"))
516c316
< b["timestamp_events"].open_perf_buffer(print_event)
---
> b["ipv4_events"].open_perf_buffer(print_ipv4_event)
